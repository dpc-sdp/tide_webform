<?php

/**
 * @file
 * Tide Webform.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\webform\Entity\Webform;
use Drupal\webform\Entity\WebformSubmission;
use Drupal\webform\WebformSubmissionForm;

/**
 * Implements hook_config_ignore_settings_alter().
 */
function tide_webform_config_ignore_settings_alter(array &$settings) {
  // Ignore the Content Rating webform so that it won't be reverted
  // during config sync.
  $settings[] = 'webform.webform.tide_webform_content_rating';
}

/**
 * Implements hook_form_alter().
 */
function tide_webform_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!empty($form['#webform_id']) && $form['#webform_id'] == 'tide_webform_content_rating') {
    $form['#attached']['library'][] = 'tide_webform/content_rating';

    // Restricting access for anonymous user from BE.
    if (\Drupal::currentUser()->isAnonymous()) {
      $form['#access'] = FALSE;
      $form['#markup'] = t('Access Denied.');
    }
  }

  if ($form_id == 'webform_ui_element_form') {
    $form['#after_build'][] = 'tide_webform_webform_ui_element_form_after_build';
  }

  if ($form_id == 'webform_submission_contact_notes_form') {
    $webform_submission = \Drupal::entityTypeManager()->getStorage('webform_submission')->load(1);
    $form['processed'] = [
      '#type' => 'checkbox',
      '#title' => t('Is this submission downloaded'),
      '#description' => t('If checked, this submission will be flagged as downloaded'),
      /*'#default_value' => $webform_submission->get('processed')->value,*/
      '#return_value' => TRUE,
    ];
    $form['actions']['submit']['#submit'][] = 'tide_webform_form_notes_submit';
  }
}

/**
 * After_build callback.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 *
 * @return array
 *   The form.
 */
function tide_webform_webform_ui_element_form_after_build(array $form, FormStateInterface $form_state) {
  $storage = $form_state->getStorage();
  // Unset the default properties of the Privacy Statement element to force
  // webform to save them in the YAML source of the element.
  if (isset($storage['element_properties']['type'])
    && $storage['element_properties']['type'] == 'webform_privacy_statement'
  ) {
    unset($storage['default_properties']['title']);
    unset($storage['default_properties']['required']);
    unset($storage['default_properties']['privacy_statement_heading']);
    unset($storage['default_properties']['privacy_statement_content']);
    $form_state->setStorage($storage);
  }

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see \Drupal\webform\Form\AdminConfig\WebformAdminConfigElementsForm::buildForm()
 */
function tide_webform_form_webform_admin_config_elements_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('tide_webform.defaults');
  $form['privacy_statement'] = [
    '#type' => 'details',
    '#title' => t('Default Privacy statement'),
    '#description' => t('Set the default values for new Privacy Statement webform elements.'),
    '#description_display' => 'before',
    '#open' => TRUE,
    '#tree' => TRUE,
  ];

  $form['privacy_statement']['add_to_new_form'] = [
    '#type' => 'checkbox',
    '#title' => t('Add a default Privacy Statement element when creating a new webform'),
    '#default_value' => $config->get('privacy_statement.add_to_new_form'),
  ];

  $form['privacy_statement']['agreement'] = [
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('This message will be displayed with a checkbox on frontend.'),
    '#default_value' => $config->get('privacy_statement.agreement'),
    '#required' => TRUE,
  ];

  $form['privacy_statement']['heading'] = [
    '#type' => 'textfield',
    '#title' => t('Heading'),
    '#default_value' => $config->get('privacy_statement.heading'),
  ];

  $form['privacy_statement']['content'] = [
    '#type' => 'webform_html_editor',
    '#title' => t('Content'),
    '#default_value' => $config->get('privacy_statement.content'),
    '#required' => TRUE,
  ];

  $form['privacy_statement']['token_tree_link'] = \Drupal::service('webform.token_manager')->buildTreeElement();

  $form['#submit'][] = 'tide_webform_form_webform_admin_config_elements_form_submit';
}

/**
 * Submit callback.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function tide_webform_form_webform_admin_config_elements_form_submit(array $form, FormStateInterface $form_state) {
  $config = \Drupal::service('config.factory')->getEditable('tide_webform.defaults');
  $privacy_statement = $form_state->getValue('privacy_statement');
  $config->set('privacy_statement', $privacy_statement)->save();
}

/**
 * Implements hook_entity_base_field_info_alter().
 *
 * @see \Drupal\webform\Entity\WebformSubmission::baseFieldDefinitions()
 */
function tide_webform_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'webform_submission') {
    // Expose the data attribute as a field.
    if (empty($fields['data'])) {
      $fields['data'] = BaseFieldDefinition::create('string_long')
        ->setName('data')
        ->setLabel('Data')
        ->setDescription(t('Webform Submission Data'))
        ->setDefaultValue('')
        ->setTargetEntityTypeId('webform_submission')
        ->setComputed(TRUE);
    }
  }
}
/**
 * Implements hook_entity_base_field_info().
 *
 * @see \Drupal\webform\Entity\WebformSubmission::baseFieldDefinitions()
 */
function tide_webform_entity_base_field_info(EntityTypeInterface $entity_type) {

  $fields = array();

  if ($entity_type->id() == 'webform_submission') {
    $fields['processed'] = BaseFieldDefinition::create('boolean')
    ->setName('Processed')
    ->setLabel(t('Processed'))
    ->setDescription(t('A flag that indicates whether the submission has been downloaded'))
    ->setDefaultValue(FALSE)
    ->setDisplayOptions('form', array(
      'type' => 'boolean_checkbox',
      'settings' => array(
        'display_label' => TRUE,
      ),
    ))
    ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}

/**
 * Implements hook_ENTITY_TYPE_create_access().
 *
 * @see \Drupal\webform\WebformSubmissionAccessControlHandler::checkAccess()
 */
function tide_webform_webform_submission_create_access(AccountInterface $account, array $context, $entity_bundle) {
  // Check webform create access.
  // This hook should be only invoked if the webform_submission is created
  // via JSON:API requests.
  $is_jsonapi = \Drupal::request()->attributes->get('_is_jsonapi', FALSE);
  if ($is_jsonapi) {
    $webform = Webform::load($entity_bundle);
    if ($webform) {
      /** @var \Drupal\webform\WebformAccessRulesManagerInterface $webform_access_rules_manager */
      $webform_access_rules_manager = \Drupal::service('webform.access_rules_manager');
      /** @var \Drupal\Core\Access\AccessResultInterface $webform_access */
      $webform_access = $webform_access_rules_manager->checkWebformAccess('create', $account, $webform);
      if ($webform_access->isAllowed()) {
        return $webform_access;
      }
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tide_webform_form_webform_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\webform\WebformEntityAddForm $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\webform\WebformInterface $webform */
  $webform = $form_object->getEntity();
  if ($webform->isNew()) {
    // Expose the webform to API requests by default.
    $access_rules = $webform->getAccessRules();
    $access_rules['configuration']['roles'][] = 'anonymous';
    $access_rules['configuration']['roles'][] = 'authenticated';
    $webform->setAccessRules($access_rules);

    // Add a Privacy Statement element to the new webform.
    $default_privacy_statement = \Drupal::config('tide_webform.defaults')->get('privacy_statement');
    if (!empty($default_privacy_statement['add_to_new_form'])) {
      $elements = $webform->getElementsDecoded();
      if (empty($elements)) {
        $elements['privacy_statement'] = [
          '#type' => 'webform_privacy_statement',
          '#required' => TRUE,
          '#privacy_statement_heading' => $default_privacy_statement['heading'] ?? '',
          '#privacy_statement_content' => $default_privacy_statement['content'] ?? '',
          '#title' => $default_privacy_statement['agreement'] ?? t('I have read and understood the privacy statement.'),
        ];

        $webform->setElements($elements);
      }
    }
  }

  $form_object->setEntity($webform);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function tide_webform_webform_submission_presave(WebformSubmission $webform_submission) {
  $elements = $webform_submission->getWebform()->getElementsDecoded();
  $errors = WebformSubmissionForm::validateWebformSubmission($webform_submission);
  if ($errors) {
    foreach ($elements as $key => $element) {
      if (isset($errors[$key]) && !empty($errors[$key])) {
        throw new Exception($errors[$key]);
      }
    }
  }
}

/**
 * Submit callback.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function tide_webform_form_notes_submit(array $form, FormStateInterface $form_state) {
  $webform_submission = \Drupal::entityTypeManager()->getStorage('webform_submission')->load(1);
  $processed = $form_state->getValue('processed');

  /*$webform_submission->set('processed')->$processed;*/

  //Get value of "submitted checkbox' and save as code - find save function for star/flag status.
}
