<?php

/**
 * @file
 * Install file.
 */

use Drupal\webform\Entity\Webform;
use Drupal\block\Entity\Block;

/**
 * Load default config values.
 */
function tide_webform_update_8001() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [drupal_get_path('module', 'tide_webform') . '/config/install'];
  _tide_import_single_config('tide_webform.defaults', $config_location);
}

/**
 * Set default access permission for anonymous to webforms.
 */
function tide_webform_update_8002(&$sandbox) {
  if (!isset($sandbox['total'])) {
    if ($count = \Drupal::entityQuery('webform')->count()->execute()) {
      $sandbox['total'] = $count;
      $sandbox['current'] = 0;
      $sandbox['#finished'] = $count ? 0 : 1;
    }
    else {
      return;
    }
  }
  $batch = 10;
  $webform_ids = \Drupal::entityQuery('webform')
    ->range($sandbox['current'], $batch)
    ->execute();
  foreach ($webform_ids as $webform_id) {
    $webform = Webform::load($webform_id);
    $access_rules = $webform->getAccessRules();
    // $access_rules['configuration']['roles'] will never be NULL.
    // checking if $access_rules['configuration']['roles'] empty or not.
    if (empty($access_rules['configuration']['roles']) || !in_array('anonymous', $access_rules['configuration']['roles'])) {
      $access_rules['configuration']['roles'][] = 'anonymous';
      $webform->setAccessRules($access_rules);
      $webform->save();
    }
    $sandbox['current']++;
  }
  if ($sandbox['total'] == 0) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * Update all webform entities with authenticated role enabled.
 */
function tide_webform_update_8003(&$sandbox) {
  if (!isset($sandbox['total'])) {
    if ($count = \Drupal::entityQuery('webform')->count()->execute()) {
      $sandbox['total'] = $count;
      $sandbox['current'] = 0;
      $sandbox['#finished'] = $count ? 0 : 1;
    }
    else {
      return;
    }
  }
  $batch = 10;
  $webform_ids = \Drupal::entityQuery('webform')
    ->range($sandbox['current'], $batch)
    ->execute();
  foreach ($webform_ids as $webform_id) {
    $webform = Webform::load($webform_id);
    $access_rules = $webform->getAccessRules();
    // $access_rules['configuration']['roles'] will never be NULL.
    // checking if $access_rules['configuration']['roles'] empty or not.
    if (empty($access_rules['configuration']['roles']) || !in_array('authenticated', $access_rules['configuration']['roles'])) {
      // For some reason we got duplicate values in this array.
      $access_rules['configuration']['roles'] = array_unique($access_rules['configuration']['roles']);
      $access_rules['configuration']['roles'][] = 'authenticated';
      $webform->setAccessRules($access_rules);
      $webform->save();
    }
    $sandbox['current']++;
  }
  if ($sandbox['total'] == 0) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
  }
}

/**
 * Restricts Content Rating - comments to 500 words.
 */
function tide_webform_update_8004() {
  $webform = Webform::load('tide_webform_content_rating');
  $comments = $webform->getElement('comments');
  $comments['#counter_type'] = 'word';
  $comments['#counter_maximum'] = '500';
  $webform->setElementProperties('comments', $comments);
  $webform->save();
}

/**
 * Updating webform settings to hide unsupported elements.
 */
function tide_webform_update_8005() {
  if (\Drupal::moduleHandler()->moduleExists('webform')) {
    $webform_elements = [
      'checkboxes',
      'color',
      'container',
      'datelist',
      'datetime',
      'details',
      'entity_autocomplete',
      'fieldset',
      'item',
      'language_select',
      'managed_file',
      'range',
      'search',
      'tableselect',
      'text_format',
      'value',
      'view',
      'webform_address',
      'webform_audio_file',
      'webform_autocomplete',
      'webform_checkboxes_other',
      'webform_codemirror',
      'webform_computed_token',
      'webform_computed_twig',
      'webform_contact',
      'webform_custom_composite',
      'webform_document_file',
      'webform_element',
      'webform_email_confirm',
      'webform_email_multiple',
      'webform_entity_checkboxes',
      'webform_entity_radios',
      'webform_entity_select',
      'webform_flexbox',
      'webform_image_file',
      'webform_likert',
      'webform_link',
      'webform_location_places',
      'webform_mapping',
      'webform_message',
      'webform_more',
      'webform_name',
      'webform_radios_other',
      'webform_rating',
      'webform_same',
      'webform_scale',
      'webform_section',
      'webform_select_other',
      'webform_signature',
      'webform_table',
      'webform_table_row',
      'webform_table_sort',
      'webform_tableselect_sort',
      'webform_telephone',
      'webform_term_checkboxes',
      'webform_terms_of_service',
      'webform_time',
      'webform_variant',
      'webform_video_file',
      'webform_wizard_page',
    ];
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('webform.settings');
    $excluded_elements_value = $config->get('element.excluded_elements');
    foreach ($webform_elements as $webform_element) {
      $excluded_elements_value[$webform_element] = $webform_element;
    }
    $config->set('element.excluded_elements', $excluded_elements_value);
    $config->save();
  }
}

/**
 * Updating visibility path.
 */
function tide_webform_update_8006() {
  $block = Block::load('tide_webform_content_rating');
  $visibility = $block->get('visibility');
  if (isset($visibility['request_path']['pages'])) {
    $visibility['request_path']['pages'] .= "\r\n/clone/*/quick_clone";
  }
  $block->set('visibility', $visibility);
  $block->save();
}

/**
 * Disable content rating block for CMS only.
 */
function tide_webform_update_8007() {
  $block = Block::load('tide_webform_content_rating');
  if ($block) {
    $status = $block->get('status');
    if ($status == TRUE) {
      $status = FALSE;
    }
    $block->set('status', $status);
    $block->save();
  }
}
